#!/usr/bin/env python3
# -*- coding: utf-8 -*-    




from neuromaps.datasets import fetch_fslr
from neuromaps import nulls
from neuromaps import stats as stats_neuromaps
from surfplot import Plot
from surfplot import Plot, utils
import matplotlib.pyplot as plt

import glob
import pandas as pd
import os

import bct.algorithms as bct_alg
import bct.utils as bct

import brainspace.datasets
from brainspace import utils

import numpy as np



def find_files_with_common_name_structural(directory, common_name, id='conn'):
    file_paths = glob.glob(os.path.join(directory, common_name))
    dict_paths = {os.path.basename(os.path.dirname(os.path.dirname(fp))): fp for fp in file_paths}
    df = pd.DataFrame.from_dict(dict_paths, orient='index').reset_index().rename(columns={'index': 'participant_id', 0: 'path_'+id})
    df = df[df['participant_id'].str.contains('_ses-v1')]
    df[['subject', 'session']] = df['participant_id'].str.rsplit('_ses-', n=1, expand=True)
    df[['subject', 'num']] = df['subject'].str.rsplit('pl0', n=1, expand=True)
    df['subject'] = df['subject'] + df['num']
    df = df.drop(["participant_id", 'session', 'num'], axis=1)
    df['img_'+id] = df['path_'+id].apply(lambda x: pd.read_csv(x, header=None).values)
    return df


labelling_schaefer = brainspace.datasets.load_parcellation('schaefer', scale=200, join=True)
mask = (labelling_schaefer != 0)
print(labelling_schaefer.shape)
# Plot surfaces with functional data
surfaces = fetch_fslr()
lh, rh = surfaces['inflated']
p = Plot(lh, rh, views=['lateral','medial'])
p.add_layer(labelling_schaefer, cbar=True, cmap='inferno')
fig = p.build()
plt.show()

directory_conn = '/home/pabaua/dev_tpil/results/results_connectflow/23-08-21_connectflow/all_schaefer/'
id='commit2'
common_name = '*/Compute_Connectivity/commit2_weights.csv'
df_img = find_files_with_common_name_structural(directory_conn, common_name, id=id)
df_img = df_img[df_img.subject.isin(['sub-07'])]

list_metrics = []
for id in ['commit2']:
    # shortest path
    metric = '_sp'
    df_img[id + metric] = df_img.apply(lambda x: bct.invert(bct_alg.distance_wei(bct.invert(x['img_' + id]))[0]), axis=1)
    df_img[id + metric] = df_img.apply(lambda x: utils.parcellation.map_to_labels(x[id + metric][7,15:], labelling_schaefer, mask=mask, fill=np.nan), axis=1)
    # Plot surfaces with functional data
    surfaces = fetch_fslr()
    lh, rh = surfaces['inflated']
    p = Plot(lh, rh, views=['lateral','medial'])
    plt.style.use('dark_background')
    p.add_layer(df_img[id + metric].mean(), cbar=True, cmap='inferno')
    fig = p.build()
    plt.show()

    # mean first passage time
    metric = '_mfpt'
    df_img[id + metric] = df_img.apply(lambda x: bct.invert(bct_alg.mean_first_passage_time(x['img_' + id])), axis=1)
    df_img[id + metric] = df_img.apply(lambda x: utils.parcellation.map_to_labels(x[id + metric][7,15:], labelling_schaefer, mask=mask, fill=np.nan), axis=1)
    surfaces = fetch_fslr()
    lh, rh = surfaces['inflated']
    p = Plot(lh, rh, views=['lateral','medial'])
    p.add_layer(df_img[id + metric].mean(), cbar=True, cmap='inferno')
    fig = p.build()
    plt.show()

    # mean first passage time
    metric = '_si'
    df_img[id + metric] = df_img.apply(lambda x: bct_alg.search_information(x['img_' + id]), axis=1)
    df_img[id + metric] = df_img.apply(lambda x: utils.parcellation.map_to_labels(x[id + metric][7,15:], labelling_schaefer, mask=mask, fill=np.nan), axis=1)
    surfaces = fetch_fslr()
    lh, rh = surfaces['inflated']
    p = Plot(lh, rh, views=['lateral','medial'])
    p.add_layer(df_img[id + metric].mean(), cbar=True, cmap='inferno')
    fig = p.build()
    plt.show()




# mask = (labelling_schaefer != 0)
# df_img['surf_data_func'] = df_img.apply(lambda x: utils.parcellation.map_to_labels(x.adj[-1, :-1], labelling_schaefer, mask=mask, fill=np.nan), axis=1)
    # df_img['rotated'] = df_img.apply(lambda x: nulls.alexander_bloch(x.surf_data_func, atlas='fsLR', density='32k', n_perm=100, seed=1234), axis=1)
    # # Plot surfaces with functional data
    # surfaces = fetch_fslr()
    # lh, rh = surfaces['inflated']
    # p = Plot(lh, rh, views=['lateral','medial'])
    # p.add_layer(df_img['surf_data_func'].mean(), cbar=True, cmap='inferno')
    # fig = p.build()
    # plt.show()

    # id='sc'
    # common_name = '*/Compute_Connectivity/sc_vol_normalized.csv'
    # df_conn_img = find_files_with_common_name_structural(directory_conn, common_name, id=id)
    # df_img = pd.merge(df_img, df_conn_img, on='subject')

    # id='commit2'
    # common_name = '*/Compute_Connectivity/commit2_weights.csv'
    # df_conn_img = find_files_with_common_name_structural(directory_conn, common_name, id=id)
    # df_img = pd.merge(df_img, df_conn_img, on='subject')

    # id='afd'
    # common_name = '*/Compute_Connectivity/afd_fixel.csv'
    # df_conn_img = find_files_with_common_name_structural(directory_conn, common_name, id=id)
    # df_img = pd.merge(df_img, df_conn_img, on='subject')

    # id='len'
    # common_name = '*/Compute_Connectivity/len.csv'
    # df_conn_img = find_files_with_common_name_structural(directory_conn, common_name, id=id)
    # df_img = pd.merge(df_img, df_conn_img, on='subject')
    # print(df_img)

    # list_metrics = []
    # for id in ['sc', 'commit2', 'len']:
    #     # shortest path
    #     metric = '_sp'
    #     df_img[id + metric] = df_img.apply(lambda x: bct.invert(bct_alg.distance_wei(bct.invert(x['img_' + id]))[0]), axis=1)
    #     df_img[id + metric] = df_img.apply(lambda x: utils.parcellation.map_to_labels(x[id + metric][7,15:], labelling_schaefer, mask=mask, fill=np.nan), axis=1)
    #     # Plot surfaces with functional data
    #     surfaces = fetch_fslr()
    #     lh, rh = surfaces['inflated']
    #     p = Plot(lh, rh, views=['lateral','medial'])
    #     p.add_layer(df_img[id + metric].mean(), cbar=True, cmap='inferno')
    #     fig = p.build()
    #     plt.show()
    #     df_img[id + metric] = df_img.apply(lambda x: stats_neuromaps.compare_images(x.surf_data_func, x[id + metric], nulls=x.rotated)[0], axis=1)
    #     list_metrics += [id + metric]

    #     # mean first passage time
    #     metric = '_mfpt'
    #     df_img[id + metric] = df_img.apply(lambda x: bct.invert(bct_alg.mean_first_passage_time(x['img_' + id])), axis=1)
    #     df_img[id + metric] = df_img.apply(lambda x: utils.parcellation.map_to_labels(x[id + metric][7,15:], labelling_schaefer, mask=mask, fill=np.nan), axis=1)
    #     df_img[id + metric] = df_img.apply(lambda x: stats_neuromaps.compare_images(x.surf_data_func, x[id + metric], nulls=x.rotated)[0], axis=1)
    #     list_metrics += [id + metric]

    #     # mean first passage time
    #     metric = '_si'
    #     df_img[id + metric] = df_img.apply(lambda x: bct_alg.search_information(x['img_' + id]), axis=1)
    #     df_img[id + metric] = df_img.apply(lambda x: utils.parcellation.map_to_labels(x[id + metric][7,15:], labelling_schaefer, mask=mask, fill=np.nan), axis=1)
    #     df_img[id + metric] = df_img.apply(lambda x: stats_neuromaps.compare_images(x.surf_data_func, x[id + metric], nulls=x.rotated)[0], axis=1)
    #     list_metrics += [id + metric]