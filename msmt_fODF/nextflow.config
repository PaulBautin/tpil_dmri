process {
    publishDir = {"./results_fodf/$sid/$task.process"}
    scratch = true
    stageInMode = 'copy'
    stageOutMode = 'rsync'
    tag = { "$sid" }
    afterScript = 'sleep 1'
}

params {
    help=false
    root=false
    atlas_centroids=false
    atlas_directory=false
    atlas_anat=false
    atlas_config=false
    run_average_bundles=true

    //**Compute fiber response function (frf)**//
        fa=0.7
        min_fa=0.5
        min_nvox=300
        roi_radius=20
        set_frf=true
        manual_frf="15,4,4"

    //**Mean fiber response function (frf)**//
        mean_frf=false

    //**Compute fODF metrics**//
        sh_order=8
        basis="descoteaux07"
        fodf_metrics_a_factor=2.0
        relative_threshold=0.1
        max_fa_in_ventricle=0.1
        min_md_in_ventricle=0.003

    //**Output directory**//
        output_dir=false

    //**Process control**//
        processes = false
}

if(params.output_dir) {
    process.publishDir = {"$params.output_dir/$sid/$task.process"}
}

if(params.processes) {
    if(params.processes > Runtime.runtime.availableProcessors()) {
        throw new RuntimeException("Number of processes higher than available CPUs.")
    }
    else if(params.processes < 1) {
        throw new RuntimeException("When set, number of processes must be >= 1 " +
                                   "and smaller or equal to the number of CPUs.")
    }
    else {
        executor.$local.cpus = params.processes
    }
}

singularity.autoMounts = true

profiles {
    large_dataset {
        params.rbx_memory_limit='16 GB'
    }

    fully_reproducible {
        params.register_processes=1
        params.rbx_processes=1
    }

    macos {
            process.scratch="/tmp"
    }

    cbrain {
      process{
        if(params.output_dir) {
          publishDir = [path: {"$params.output_dir/$sid/$task.process"}, mode: 'copy']
        }
        else{
          publishDir = [path: {"./results_rbx/$sid/$task.process"}, mode: 'copy']
        }
      }
    }
}
